module;
#include <array>
#include <cassert>
#include "DxDef.h"

export module Brawler.D3D12.RootSignatureDatabase;
import Brawler.JobSystem;
import Util.Engine;

export namespace Brawler
{
	namespace D3D12
	{
		// RSIdentifierEnumType should be Brawler::RootSignatures::RootSignatureID.
		template <typename RSIdentifierEnumType>
		class RootSignatureDatabase
		{
		private:
			RootSignatureDatabase();

		public:
			~RootSignatureDatabase() = default;

			RootSignatureDatabase(const RootSignatureDatabase& rhs) = delete;
			RootSignatureDatabase& operator=(const RootSignatureDatabase& rhs) = delete;

			RootSignatureDatabase(RootSignatureDatabase&& rhs) noexcept = default;
			RootSignatureDatabase& operator=(RootSignatureDatabase&& rhs) noexcept = default;

			static RootSignatureDatabase& GetInstance();

			void InitializeDatabase();

			template <RSIdentifierEnumType RSIdentifier>
				requires (RSIdentifier != RSIdentifierEnumType::COUNT_OR_ERROR)
			Brawler::D3D12RootSignature& GetRootSignature();

			template <RSIdentifierEnumType RSIdentifier>
				requires (RSIdentifier != RSIdentifierEnumType::COUNT_OR_ERROR)
			const Brawler::D3D12RootSignature& GetRootSignature() const;

		private:
			std::array<Microsoft::WRL::ComPtr<Brawler::D3D12RootSignature>, std::to_underlying(RSIdentifierEnumType::COUNT_OR_ERROR)> mRootSigMap;
		};
	}
}

// -----------------------------------------------------------------------------------------------------------------------------------

namespace Brawler
{
	namespace RootSignatures
	{
		// These two functions are defined in the .ixx files generated by the Brawler Shader Compiler.

		template <auto RSIdentifier>
		extern consteval auto GetSerializedRootSignature1_1();

		template <auto RSIdentifier>
		extern consteval auto GetSerializedRootSignature1_0();
	}
}

namespace
{
	template <typename RSIdentifierEnumType, RSIdentifierEnumType RSIdentifier, D3D_ROOT_SIGNATURE_VERSION HighestVersion>
	__forceinline void AddRootSignatureCreationJob(std::array<Microsoft::WRL::ComPtr<Brawler::D3D12RootSignature>, std::to_underlying(RSIdentifierEnumType::COUNT_OR_ERROR)>& rsArray, Brawler::JobGroup& jobGroup)
	{
		Microsoft::WRL::ComPtr<Brawler::D3D12RootSignature>& rootSigObject{ rsArray[std::to_underlying(RSIdentifier)] };
		jobGroup.AddJob([&rootSigObject] ()
		{
			if constexpr (std::to_underlying(HighestVersion) >= D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_1)
			{
				constexpr auto rootSignatureSpan{ Brawler::RootSignatures::GetSerializedRootSignature1_1<RSIdentifier>() };
				CheckHRESULT(Util::Engine::GetD3D12Device().CreateRootSignature(
					0,
					rootSignatureSpan.data(),
					rootSignatureSpan.size_bytes(),
					IID_PPV_ARGS(&rootSigObject)
				));
			}

			if constexpr (HighestVersion == D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_0)
			{
				constexpr auto rootSignatureSpan{ Brawler::RootSignatures::GetSerializedRootSignature1_0<RSIdentifier>() };
				CheckHRESULT(Util::Engine::GetD3D12Device().CreateRootSignature(
					0,
					rootSignatureSpan.data(),
					rootSignatureSpan.size_bytes(),
					IID_PPV_ARGS(&rootSigObject)
				));
			}
		});

		if constexpr ((std::to_underlying(RSIdentifier) + 1) != std::to_underlying(RSIdentifierEnumType::COUNT_OR_ERROR))
			AddRootSignatureCreationJob<RSIdentifierEnumType, static_cast<RSIdentifierEnumType>(std::to_underlying(RSIdentifier) + 1), HighestVersion>(rsArray, jobGroup);
	}
}

namespace Brawler
{
	namespace D3D12
	{
		template <typename RSIdentifierEnumType>
		RootSignatureDatabase<RSIdentifierEnumType>::RootSignatureDatabase() :
			mRootSigMap()
		{
			// Root signature objects should not take long at all to compile (TODO: source?). Thus,
			// we will just compile them all at once.

			// First, we check for root signature 1.1 support.
			D3D_ROOT_SIGNATURE_VERSION highestSupportedVersion = D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_0;

			{
				D3D12_FEATURE_DATA_ROOT_SIGNATURE rootSigFeatureData{};
				const HRESULT hr = Util::Engine::GetD3D12Device().CheckFeatureSupport(D3D12_FEATURE::D3D12_FEATURE_ROOT_SIGNATURE, &rootSigFeatureData, sizeof(rootSigFeatureData));

				if (SUCCEEDED(hr)) [[likely]]
					highestSupportedVersion = rootSigFeatureData.HighestVersion;
			}

			Brawler::JobGroup rootSigCreationJobGroup{};
			rootSigCreationJobGroup.Reserve(std::to_underlying(RSIdentifierEnumType::COUNT_OR_ERROR));

			if (std::to_underlying(highestSupportedVersion) >= std::to_underlying(D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_1)) [[likely]]
				AddRootSignatureCreationJob<static_cast<RSIdentifierEnumType>(0), D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_1>(mRootSigMap, rootSigCreationJobGroup);
			else
				AddRootSignatureCreationJob<static_cast<RSIdentifierEnumType>(0), D3D_ROOT_SIGNATURE_VERSION::D3D_ROOT_SIGNATURE_VERSION_1_0>(mRootSigMap, rootSigCreationJobGroup);

			rootSigCreationJobGroup.ExecuteJobs();
		}

		template <typename RSIdentifierEnumType>
		RootSignatureDatabase<RSIdentifierEnumType>& RootSignatureDatabase<RSIdentifierEnumType>::GetInstance()
		{
			static RootSignatureDatabase<RSIdentifierEnumType> instance{};
			return instance;
		}

		template <typename RSIdentifierEnumType>
		template <RSIdentifierEnumType RSIdentifier>
			requires (RSIdentifier != RSIdentifierEnumType::COUNT_OR_ERROR)
		Brawler::D3D12RootSignature& RootSignatureDatabase<RSIdentifierEnumType>::GetRootSignature()
		{
			assert(mRootSigMap[std::to_underlying(RSIdentifier)] != nullptr && "ERROR: A root signature object was never initialized in the RootSignatureDatabase!");
			return *((mRootSigMap[std::to_underlying(RSIdentifier)]).Get());
		}

		template <typename RSIdentifierEnumType>
		template <RSIdentifierEnumType RSIdentifier>
			requires (RSIdentifier != RSIdentifierEnumType::COUNT_OR_ERROR)
		const Brawler::D3D12RootSignature& RootSignatureDatabase<RSIdentifierEnumType>::GetRootSignature() const
		{
			assert(mRootSigMap[std::to_underlying(RSIdentifier)] != nullptr && "ERROR: A root signature object was never initialized in the RootSignatureDatabase!");
			return *((mRootSigMap[std::to_underlying(RSIdentifier)]).Get());
		}
	}
}