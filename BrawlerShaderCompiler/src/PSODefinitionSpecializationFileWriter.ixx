module;
#include <string>

export module Brawler.PSODefinitionSpecializationFileWriter;
import Brawler.I_SourceFileWriter;
import Brawler.PSOID;
import Brawler.PSODefinition;
import Brawler.FileWriterNode;
import Brawler.FileStrings;
import Util.General;
import Brawler.PSOBuilder;
import Brawler.PSOBuilderCreators;

/*
Source File Name: PSODefinition_[PSO Identifier String].ixx

Contents:

// WARNING: This file was auto-generated by the Brawler Shader Compiler. You will incur the
// wrath of God if you dare touch it.

module;
#include <array>
#include "../DxDef.h"

export module Brawler.PSOs.PSODefinition:[PSO Identifier String];
import :PSODefinitionBase;
import Brawler.PSOs.PSOID;
import Brawler.RootSignatures.RootSignatureID;
import Brawler.D3D12.RootSignatureDatabase;
import Brawler.NZStringView;

export namespace Brawler
{
	namespace PSOs
	{
		template <>
		struct PSODefinition<PSOID::[PSO Identifier String]>
		{
			struct PSOStreamType
			{
				\\ This will contain the contents of the PSO description stream used in ID3D12Device2::CreatePipelineState().
			};

			static constexpr std::array<std::uint8_t, sizeof(PSOStreamType)> DEFAULT_PSO_VALUE{ ... };
			static constexpr Brawler::RootSignatures::RootSignatureID ROOT_SIGNATURE_ID = { ... };

			static constexpr Brawler::NZWStringView UNIQUE_PSO_NAME{ ... };

			\\ Additional fields are added to this stucture as specified by the corresponding PSOBuilder's I_PSOFieldResolver
			\\ instances.

			static void ExecuteRuntimePSOResolution(PSOStreamType& psoDesc)
			{
				\\ This function's contents are filled out by the corresponding PSOBuilder's I_PSOFieldResolver instances.
			}
		};
	}
}
*/

export namespace Brawler
{
	namespace SourceFileWriters
	{
		template <Brawler::PSOID PSOIdentifier>
		class PSODefinitionSpecializationFileWriter final : public I_SourceFileWriter
		{
		public:
			PSODefinitionSpecializationFileWriter();

			PSODefinitionSpecializationFileWriter(const PSODefinitionSpecializationFileWriter& rhs) = delete;
			PSODefinitionSpecializationFileWriter& operator=(const PSODefinitionSpecializationFileWriter& rhs) = delete;

			PSODefinitionSpecializationFileWriter(PSODefinitionSpecializationFileWriter&& rhs) noexcept = default;
			PSODefinitionSpecializationFileWriter& operator=(PSODefinitionSpecializationFileWriter&& rhs) noexcept = default;

		protected:
			FileWriterNode CreateFileWriterTree() const override;
		};
	}
}

// -----------------------------------------------------------------------------------------------------------------------

namespace
{
	template <Brawler::PSOID PSOIdentifier>
	std::wstring CreateSourceFileNameString()
	{
		std::wstring srcFileNameStr{ L"PSODefinition_" };
		srcFileNameStr += Util::General::StringToWString(Brawler::GetPSOIDString<PSOIdentifier>()) + L".ixx";
		
		return srcFileNameStr;
	}
}

namespace Brawler
{
	namespace SourceFileWriters
	{
		template <Brawler::PSOID PSOIdentifier>
		PSODefinitionSpecializationFileWriter<PSOIdentifier>::PSODefinitionSpecializationFileWriter() :
			I_SourceFileWriter(CreateSourceFileNameString<PSOIdentifier>())
		{}

		template <Brawler::PSOID PSOIdentifier>
		FileWriterNode PSODefinitionSpecializationFileWriter<PSOIdentifier>::CreateFileWriterTree() const
		{
			Brawler::FileWriterNode rootNode{};

			{
				Brawler::FileWriterNode headerNode{};

				std::string headerText{ Brawler::FileStrings::AUTO_GENERATED_WARNING_COMMENT };
				headerText += "module;\n#include <array>\n#include \"../DxDef.h\"\n\nexport module Brawler.PSOs.PSODefinition:";
				headerText += Brawler::GetPSOIDString<PSOIdentifier>();
				headerText += ";\nimport :PSODefinitionBase;\nimport Brawler.PSOs.PSOID;\nimport Brawler.RootSignatures.RootSignatureID;\nimport Brawler.D3D12.RootSignatureDatabase;\nimport Brawler.NZStringView;\n\n";

				headerNode.SetOutputText(std::move(headerText));
				rootNode.AddChildNode(std::move(headerNode));
			}

			{
				Brawler::FileWriterNode namespaceNode{};

				{
					Brawler::FileWriterNode beginNamespaceNode{};
					beginNamespaceNode.SetOutputText("export namespace Brawler\n{\n\tnamespace PSOs\n\t{\n");

					namespaceNode.AddChildNode(std::move(beginNamespaceNode));
				}

				// The PSOBuilder will create the explicit specialization of the PSODefinition struct.
				{
					const Brawler::PSOs::PSOBuilder<PSOIdentifier> psoBuilder{ Brawler::PSOs::CreatePSOBuilder<PSOIdentifier>() };
					namespaceNode.AddChildNode(psoBuilder.CreatePSODefinitionFileWriterNode());
				}
				
				{
					Brawler::FileWriterNode endNamespaceNode{};
					endNamespaceNode.SetOutputText("\t}\n}");

					namespaceNode.AddChildNode(std::move(endNamespaceNode));
				}

				rootNode.AddChildNode(std::move(namespaceNode));
			}

			return rootNode;
		}
	}
}