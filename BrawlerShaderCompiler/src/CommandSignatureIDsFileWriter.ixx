module;
#include <array>
#include <string>
#include <string_view>
#include <format>
#include <ranges>

export module Brawler.CommandSignatureIDsFileWriter;
import Brawler.I_SourceFileWriter;
import Brawler.ShaderProfileID;
import Brawler.ShaderProfileDefinition;
import Brawler.FileStrings;
import Brawler.FileWriterNode;
import Brawler.CommandSignatureID;
import Brawler.CommandSignatureDefinition;

/*
Source File Name: CommandSignatureID.ixx

Contents:

// WARNING: This file was auto-generated by the Brawler Shader Compiler. You will incur the
// wrath of God if you dare touch it.

module;

export module Brawler.CommandSignatures.CommandSignatureID;

export namespace Brawler
{
	namespace CommandSignatures
	{
		enum class CommandSignatureID
		{
			X,
			Y,

			\\ This continues for all of the command signatures relevant to the current shader profile.

			COUNT_OR_ERROR
		};
	}
}
*/

export namespace Brawler
{
	namespace SourceFileWriters
	{
		template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
		class CommandSignatureIDsFileWriter final : public I_SourceFileWriter
		{
		public:
			CommandSignatureIDsFileWriter();

			CommandSignatureIDsFileWriter(const CommandSignatureIDsFileWriter& rhs) = delete;
			CommandSignatureIDsFileWriter& operator=(const CommandSignatureIDsFileWriter& rhs) = delete;

			CommandSignatureIDsFileWriter(CommandSignatureIDsFileWriter&& rhs) noexcept = default;
			CommandSignatureIDsFileWriter& operator=(CommandSignatureIDsFileWriter&& rhs) noexcept = default;

		protected:
			Brawler::FileWriterNode CreateFileWriterTree() const override;
		};
	}
}

// ------------------------------------------------------------------------------------------------------------------------------------------

namespace
{
	template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
	std::string CreateEnumEntriesString()
	{
		static constexpr auto COMMAND_SIGNATURE_ID_ARR{ Brawler::ShaderProfiles::GetCommandSignatureIdentifiers<ProfileID>() };
		static constexpr std::size_t COMMAND_SIGNATURE_COUNT = COMMAND_SIGNATURE_ID_ARR.size();

		static constexpr auto ADD_COMMAND_SIGNATURE_ID_STRING_LAMBDA = []<std::size_t CurrIndex>(this const auto& self, std::array<std::string_view, COMMAND_SIGNATURE_COUNT>& identifierStrArr)
		{
			if constexpr (CurrIndex != COMMAND_SIGNATURE_COUNT)
			{
				constexpr Brawler::CommandSignatureID CURR_IDENTIFIER = COMMAND_SIGNATURE_ID_ARR[CurrIndex];
				constexpr std::string_view CURR_ID_STRING{ Brawler::GetCommandSignatureIDString<CURR_IDENTIFIER>() };

				identifierStrArr[CurrIndex] = CURR_ID_STRING;

				constexpr std::size_t NEXT_INDEX = (CurrIndex + 1);
				self.template operator()<NEXT_INDEX>(identifierStrArr);
			}
		};

		static constexpr std::array<std::string_view, COMMAND_SIGNATURE_COUNT> COMMAND_SIGNATURE_ID_STRING_ARR{ []()
		{
			std::array<std::string_view, COMMAND_SIGNATURE_COUNT> identifierStrArr{};
			ADD_COMMAND_SIGNATURE_ID_STRING_LAMBDA.template operator()<0>(identifierStrArr);

			return identifierStrArr;
		}() };

		std::string enumEntriesStr{};

		for (const auto idStr : COMMAND_SIGNATURE_ID_STRING_ARR)
			enumEntriesStr += std::format("\t\t\t{},\n", idStr);

		if constexpr (!COMMAND_SIGNATURE_ID_ARR.empty())
			enumEntriesStr += "\n\t\t\tCOUNT_OR_ERROR";
		else
			enumEntriesStr += "\t\t\tCOUNT_OR_ERROR";

		return enumEntriesStr;
	}
}

namespace Brawler
{
	namespace SourceFileWriters
	{
		template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
		CommandSignatureIDsFileWriter<ProfileID>::CommandSignatureIDsFileWriter() :
			I_SourceFileWriter(L"CommandSignatureID.ixx")
		{}

		template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
		Brawler::FileWriterNode CommandSignatureIDsFileWriter<ProfileID>::CreateFileWriterTree() const
		{
			FileWriterNode rootNode{};

			{
				FileWriterNode autoGeneratedWarningNode{};
				autoGeneratedWarningNode.SetOutputText(std::string{ Brawler::FileStrings::AUTO_GENERATED_WARNING_COMMENT });

				rootNode.AddChildNode(std::move(autoGeneratedWarningNode));
			}

			{
				static constexpr std::string_view FILE_CONTENTS_FORMAT_STR{
R"(module;

export module Brawler.CommandSignatures.CommandSignatureID;

export namespace Brawler
{{
	namespace CommandSignatures
	{{
		enum class CommandSignatureID
		{{
{}
		}};
	}}
}})"
				};

				static constexpr auto COMMAND_SIGNATURE_IDENTIFIERS_SEQUENCE{ Brawler::ShaderProfiles::GetCommandSignatureIdentifiers<ProfileID>() };

				const std::string enumEntriesStr{ CreateEnumEntriesString<ProfileID>() };

				FileWriterNode fileContentsNode{};
				fileContentsNode.SetOutputText(std::format(FILE_CONTENTS_FORMAT_STR, enumEntriesStr));

				rootNode.AddChildNode(std::move(fileContentsNode));
			}

			return rootNode;
		}
	}
}