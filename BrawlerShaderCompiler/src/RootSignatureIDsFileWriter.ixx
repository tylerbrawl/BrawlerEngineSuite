module;
#include <string>

export module Brawler.RootSignatureIDsFileWriter;
import Brawler.I_SourceFileWriter;
import Brawler.ShaderProfileID;
import Brawler.ShaderProfileDefinition;
import Brawler.FileStrings;
import Brawler.RootSignatureID;
import Brawler.RootSignatureDefinition;

/*
Source File Name: RootSignatureID.ixx

Contents:

// WARNING: This file was auto-generated by the Brawler Shader Compiler. You will incur the
// wrath of God if you dare touch it.

module;

export module Brawler.RootSignatures.RootSignatureID;

export namespace Brawler
{
	namespace RootSignatures
	{
		enum class RootSignatureID
		{
			X,
			Y,

			\\ This continues for all of the root signatures relevant to the current shader profile.

			COUNT_OR_ERROR
		};
	}
}
*/

export namespace Brawler
{
	namespace SourceFileWriters
	{
		template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
		class RootSignatureIDsFileWriter final : public I_SourceFileWriter
		{
		public:
			RootSignatureIDsFileWriter();

			RootSignatureIDsFileWriter(const RootSignatureIDsFileWriter& rhs) = delete;
			RootSignatureIDsFileWriter& operator=(const RootSignatureIDsFileWriter& rhs) = delete;

			RootSignatureIDsFileWriter(RootSignatureIDsFileWriter&& rhs) noexcept = default;
			RootSignatureIDsFileWriter& operator=(RootSignatureIDsFileWriter&& rhs) noexcept = default;

		protected:
			Brawler::FileWriterNode CreateFileWriterTree() const override;
		};
	}
}

// -----------------------------------------------------------------------------------------------------

namespace
{
	template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
	Brawler::FileWriterNode CreateRootSignatureIDEnumDefinitionNode()
	{
		const auto createNodeLambda = []<std::underlying_type_t<Brawler::RootSignatureID>... RSIdentifierNums>(std::integer_sequence<std::underlying_type_t<Brawler::RootSignatureID>, RSIdentifierNums...>) -> Brawler::FileWriterNode
		{
			std::string enumValueListStr{};
			((enumValueListStr += "\t\t\t" + std::string{ Brawler::GetRootSignatureIDString<static_cast<Brawler::RootSignatureID>(RSIdentifierNums)>() } + ",\n"), ...);

			enumValueListStr += "\n\t\t\tCOUNT_OR_ERROR\n";

			Brawler::FileWriterNode enumListNode{};
			enumListNode.SetOutputText(std::move(enumValueListStr));

			return enumListNode;
		};

		return createNodeLambda(Brawler::ShaderProfiles::GetRootSignatureIdentifiers<ProfileID>());
	}
}

namespace Brawler
{
	namespace SourceFileWriters
	{
		template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
		RootSignatureIDsFileWriter<ProfileID>::RootSignatureIDsFileWriter() :
			I_SourceFileWriter(L"RootSignatureID.ixx")
		{}

		template <Brawler::ShaderProfiles::ShaderProfileID ProfileID>
		Brawler::FileWriterNode RootSignatureIDsFileWriter<ProfileID>::CreateFileWriterTree() const
		{
			Brawler::FileWriterNode rootNode{};

			{
				Brawler::FileWriterNode headerNode{};

				std::string headerStr{ Brawler::FileStrings::AUTO_GENERATED_WARNING_COMMENT };
				headerStr += "module;\n\nexport module Brawler.RootSignatures.RootSignatureID;\n\n";

				headerNode.SetOutputText(std::move(headerStr));
				rootNode.AddChildNode(std::move(headerNode));
			}

			{
				Brawler::FileWriterNode beginEnumListNode{};
				beginEnumListNode.SetOutputText("export namespace Brawler\n{\n\tnamespace RootSignatures\n\t{\n\t\tenum class RootSignatureID\n\t\t{\n");

				rootNode.AddChildNode(std::move(beginEnumListNode));
			}

			rootNode.AddChildNode(CreateRootSignatureIDEnumDefinitionNode<ProfileID>());

			{
				Brawler::FileWriterNode endEnumListNode{};
				endEnumListNode.SetOutputText("\t\t};\n\t}\n}");

				rootNode.AddChildNode(std::move(endEnumListNode));
			}

			return rootNode;
		}
	}
}