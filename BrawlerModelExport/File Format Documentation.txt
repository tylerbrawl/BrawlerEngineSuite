*NOTE*: Unless otherwise stated, ALL listed structures are tightly packed as if "#pragma pack(1)" were used.

Each model file consists of multiple LOD meshes, which in turn consist of multiple meshes. Each LOD mesh has at most one type of
mesh.

The .bmdl file generated by the Brawler Model Exporter is the main model file. Its current layout is as follows (remember to account
for packing when deserializing):

struct ModelFileHeader
{
	// Common Header Contents
	std::uint32_t Magic;
	std::uint32_t Version;

	// Current (V1) Versioned Header Contents
	std::uint32_t LODMeshCount;
};

The correct magic string is "BMDL," and the current version number is 1. Immediately following this data, for each LOD mesh counted by
LODMeshCount, the following data is listed:

struct LODMeshInfo
{
	MeshTypeID Identifier;  // This takes up the same space as a std::uint32_t.
	std::uint32_t MeshCount;

	std::array<MeshDefinition<Identifier>, MeshCount> MeshDefinitionList;
};

Here, MeshDefinition<MeshTypeID ID> is a pseudo-templated type which describes the data for each mesh. It is templated on the MeshTypeID
value specified by Identifier; that is, the data which immediately follows MeshCount varies based on the type of mesh. Here are the currently
defined MeshDefinition "types:"

template <>
struct MeshDefinition<MeshTypeID::STATIC>
{
	// This defines the material for this mesh.
	SerializedMaterialDefinition MaterialDefinition;
	
	// This is the minimum point of the mesh's AABB in object space.
	DirectX::XMFLOAT3 AABBMinPoint;

	// This is the number of vertices in this mesh's vertex buffer.
	std::uint32_t VertexCount;

	// This is the maximum point of the mesh's AABB in object space.
	DirectX::XMFLOAT3 AABBMaxPoint;

	// This is the number of indices in this mesh's index buffer. Note that the index buffer is currently *NOT* padded to always fill a
	// triangle cluster; this must be done during de-serialization.
	std::uint32_t IndexCount;

	// This is the FilePathHash to the mesh's vertex buffer. Search the .BPK archive for this virtual file to get the right data.
	std::uint64_t VertexBufferFilePathHash;

	// This is the FilePathHash to the mesh's index buffer. Search the .BPK archive for this virtual file to get the right data.
	std::uint64_t IndexBufferFilePathHash;
};

Each MeshDefinition instance has a SerializedMaterialDefinition field. A material definition provides a list of textures for a given material
instance. A FilePathHash with a value of 0 means that the texture slot is unused in the material definition. The following structure provides
the definition of SerializedMaterialDefinition:

struct SerializedMaterialDefinition
{
	
}